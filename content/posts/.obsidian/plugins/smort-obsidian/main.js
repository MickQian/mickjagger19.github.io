/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => Smort
});
var import_obsidian = __toModule(require("obsidian"));

// SmortLogo.svg
var SmortLogo_default = `<svg 
    width='2rem' 
    height='2rem'
    viewBox="0 0 247 167" 
    fill="none" 
    xmlns="http://www.w3.org/2000/svg"
>
    <path 
        d="M166.325 126.325L200.325 160.325C201.325 161.325 203.925 162.725 206.325 160.325L240.325 126.325C241.325 125.325 242.725 122.725 240.325 120.325L206.325 86.3252L200.325 80.3252L166.325 46.3252L160.325 40.3252L126.325 6.32516C125.325 5.32516 122.725 3.92516 120.325 6.32516L86.3252 40.3252L80.3252 46.3252L46.3252 80.3252L40.3252 86.3252L6.32516 120.325C5.32516 121.325 3.92516 123.925 6.32516 126.325L40.3252 160.325C41.3252 161.325 43.9252 162.725 46.3252 160.325L80.3252 126.325L86.3252 120.325L120.325 86.3252C121.325 85.3252 123.925 83.9252 126.325 86.3252L160.325 120.325L166.325 126.325Z" 
        fill='#FF614D' 
        stroke='#FF614D' 
        strokeWidth="10"
    />
</svg>`;

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default = version;

// main.ts
function uuidValidateV4(uuid) {
  return validate_default(uuid) && version_default(uuid) === 4;
}
var Smort = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "smort-modal-command",
        name: "Get Smort.io article as Markdown",
        callback: () => {
          new URLModal(this.app, this).open();
        }
      });
    });
  }
  processURL(url) {
    return __async(this, null, function* () {
      const activeView = this.getActiveView();
      if (!activeView) {
        console.error("[Smort] No active view to insert into.");
        return;
      }
      let urlObj;
      try {
        urlObj = new URL(url);
      } catch (e) {
        new import_obsidian.Notice("[Smort] Error: Invalid URL provided", 5e3);
        return;
      }
      const articleId = urlObj.pathname.slice(1);
      if (!uuidValidateV4(articleId)) {
        new import_obsidian.Notice("[Smort] Error: Invalid article ID", 5e3);
        return;
      }
      const apiURL = `https://www.smort.io/api/article?uuid=${articleId}&markup=markdown`;
      (0, import_obsidian.requestUrl)({
        url: apiURL,
        method: "GET",
        headers: { Accept: "application/json" }
      }).then((response) => {
        if (response.status !== 200) {
          new import_obsidian.Notice(`[Smort] Error: ${response.status}`, 5e3);
          return;
        }
        this.addMarkdown(response.text);
      }).catch((error) => new import_obsidian.Notice("[Smort] Error: " + error, 5e3));
    });
  }
  addMarkdown(md) {
    return __async(this, null, function* () {
      const activeView = this.getActiveView();
      if (!activeView) {
        console.error("[Smort] No active view to insert into.");
        return;
      }
      activeView.editor.replaceSelection(md);
    });
  }
  getActiveView() {
    return this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  }
};
var URLModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    this.modalEl.id = "smort-modal";
  }
  onOpen() {
    const { contentEl } = this;
    (0, import_obsidian.addIcon)("smort-logo", SmortLogo_default);
    contentEl.createEl("h1", {
      text: "Smort.io",
      cls: "smort-title"
    });
    const urlField = new import_obsidian.TextComponent(contentEl).setPlaceholder("https://smort.io/[...]");
    urlField.inputEl.id = "smort-input";
    const getSmort = () => {
      const url = urlField.getValue();
      this.plugin.processURL(url);
      this.close();
    };
    const smortButton = new import_obsidian.ButtonComponent(contentEl).setButtonText("Get Markdown").onClick(getSmort);
    smortButton.buttonEl.id = "smort-button";
    urlField.inputEl.focus();
    urlField.inputEl.addEventListener("keypress", function(keypressed) {
      if (keypressed.key === "Enter") {
        getSmort();
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
